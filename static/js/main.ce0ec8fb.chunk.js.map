{"version":3,"sources":["components/NavBar/NavBar.tsx","components/HomePage/HomePage.tsx","components/PersonLink/PersonLink.tsx","components/PeoplePage/PersonInfo/PersonInfo.tsx","components/PeoplePage/PeopleList/PeopleList.tsx","api.ts","components/helpers/getPrepearedPeople.ts","components/Loader/Loader.tsx","components/PeoplePage/PeoplePage.tsx","components/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["NavBar","memo","className","role","isActive","cn","to","HomePage","PersonLink","React","person","slug","sex","name","PersonInfo","selectedPerson","isSelectedPerson","born","died","mother","motherName","father","fatherName","PeopleList","people","length","map","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","getPreparedPeople","find","mom","dad","Loader","PeoplePage","useState","setPeople","isLoading","setIsLoading","isDataLoaded","setIsDataLoaded","errorMessage","setErrorMessage","useParams","loadPeople","getPeopleFromServer","preparedPeople","useEffect","isPeopleLoaded","useMemo","NotFoundPage","App","path","index","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ce0ec8fb.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport const NavBar: React.FC = memo(() => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => cn(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            )}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => cn(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            )}\n            to=\"people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n});\n","import React from 'react';\n\nexport const HomePage: React.FC = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import React from 'react';\nimport cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = React.memo(({ person }) => (\n  <Link\n    to={`/people/${person.slug}`}\n    className={cn({\n      'has-text-danger': person.sex === 'f',\n    })}\n  >\n    {person.name}\n  </Link>\n));\n","import React, { memo } from 'react';\nimport cn from 'classnames';\nimport { Person } from '../../../types';\nimport { PersonLink } from '../../PersonLink/PersonLink';\n\n// eslint-disable-next-line no-lone-blocks\n{ /* eslint-disable max-len */ }\n\ninterface Props {\n  person: Person;\n  selectedPerson: string | null;\n}\n\nexport const PersonInfo: React.FC<Props> = memo(({ person, selectedPerson }) => {\n  const isSelectedPerson = person.slug === selectedPerson;\n\n  return (\n    <tr\n      className={cn({ 'has-background-warning': isSelectedPerson })}\n      data-cy=\"person\"\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>\n        {person.sex}\n      </td>\n      <td>\n        {person.born}\n      </td>\n      <td>\n        {person.died}\n      </td>\n\n      <td>\n        {person.mother\n          ? <PersonLink person={person.mother} />\n          : person.motherName || '-'}\n      </td>\n\n      <td>\n        {person.father\n          ? <PersonLink person={person.father} />\n          : person.fatherName || '-'}\n      </td>\n    </tr>\n  );\n});\n","import React, { memo } from 'react';\nimport { PersonInfo } from '../PersonInfo/PersonInfo';\nimport { Person } from '../../../types';\n\ninterface Props {\n  people: Person[];\n  selectedPerson: string | null;\n}\n\nexport const PeopleList: React.FC<Props> = memo(({\n  people,\n  selectedPerson,\n}) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.length !== 0\n          ? (\n            people.map(person => (\n              <PersonInfo\n                person={person}\n                selectedPerson={selectedPerson}\n                key={person.slug}\n              />\n            ))\n          ) : (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n      </tbody>\n    </table>\n  );\n});\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../../types';\n\nexport const getPreparedPeople = (people: Person[]) => (\n  people.map(person => {\n    const mother = people.find(mom => (\n      mom.name === person.motherName\n    ));\n    const father = people.find(dad => (\n      dad.name === person.fatherName\n    ));\n\n    return (\n      {\n        ...person,\n        mother,\n        father,\n      }\n    );\n  })\n);\n","import './Loader.scss';\r\n\r\nexport const Loader = () => (\r\n  <div className=\"Loader\" data-cy=\"loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { PeopleList } from './PeopleList/PeopleList';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { getPreparedPeople } from '../helpers/getPrepearedPeople';\nimport { Loader } from '../Loader';\n\nexport const PeoplePage: React.FC = memo(() => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const { slug = null } = useParams();\n\n  const loadPeople = async () => {\n    setIsLoading(true);\n    setErrorMessage('');\n    try {\n      const getPeopleFromServer = await getPeople();\n      const preparedPeople = getPreparedPeople(getPeopleFromServer);\n\n      setPeople(preparedPeople);\n      setIsDataLoaded(true);\n    } catch (error) {\n      setErrorMessage('Can\\'t load people');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  const isPeopleLoaded = useMemo(() => (\n    isDataLoaded && people.length\n  ), [isDataLoaded, people]);\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        <h1 className=\"title\">People Page</h1>\n        {isLoading\n          ? <Loader />\n          : (\n            <>\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {errorMessage}\n                </p>\n              )}\n\n              {isPeopleLoaded\n                ? <PeopleList people={people} selectedPerson={slug} />\n                : (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                )}\n            </>\n          )}\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import './App.scss';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { NavBar } from './components/NavBar/NavBar';\nimport { HomePage } from './components/HomePage/HomePage';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage/NotFoundPage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}